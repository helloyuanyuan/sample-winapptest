<?xml version="1.0" encoding="utf-8"?>

<ICRpilot>
  <Completion>
    <Config id="AUTOonline.Germany.hdi" culture="de-DE" numberOfColumns="1" recognitionResultType="Cadosys">
      <Name>
        <Culture lcid="de-DE" value="Deutschland" />
        <Culture lcid="neutral" value="Germany" />
      </Name>

      <Developers help="Not currently used, only stored in the config">
        <Developer1>a.dolnik@autoonline.com</Developer1>
        <Developer>a.grothues@autoonline.com</Developer>
        <Developer>h.lehnert@autoonline.com</Developer>
        <Developer>qtd.trinh@autoonline.com</Developer>
        <Developer>aleksander.dymshyts@ax-ao.de</Developer>
      </Developers>

      <ToolBar>
        <Button Name="DiscardForcedDiscard" Enabled="false">
          <Visibility>
            <!--<Vendor belongsTo="00000009"/> would also be possible-->
            <Linq.Any of="global.Vendor.Hierarchy">
              <Lambda capture="groupId">
                <Compare if="Equal">
                  <Property valueOf="groupId"/>
                  <Constant value="00000009"/>
                </Compare>
              </Lambda>
            </Linq.Any>
          </Visibility>
          <!--<Visibility callMethod="global.CustomConditions.VendorBelongsTo">
            <Parameter name="groupId" value="00000009"/>
          </Visibility>-->
        </Button>
        <Button Name="DiscardAudatex" Enabled="false" Visible="false" />
        <Button Name="DiscardAge" Enabled="false">
          <Visibility>
            <Property valueOf="global.Vendor.MaxExpertiseAgeInDays"/>
            <!--<Linq.Any of="global.Vendor.Settings">
              <Lambda capture="setting">
                <And>
                  <Compare if="Equal">
                    <Property valueOf="setting.Namespace"/>
                    <Constant value="ICRpilot"/>
                  </Compare>
                  <Compare if="Equal">
                    <Property valueOf="setting.Name"/>
                    <Constant value="MaxExpertiseAgeInDays"/>
                  </Compare>
                  <Property valueOf="setting.Value"/>
                </And>
              </Lambda>
            </Linq.Any>-->
          </Visibility>
        </Button>
        <Button Name="ClearFields" Enabled="false" Visible="false" />
        <Button Name="PrevPage" Enabled="false" Visible="false" />
        <Button Name="NextPage" Enabled="false" Visible="false" />
        <Button Name="LastPage" Enabled="false" Visible="false" />
        <Button Name="FirstPage" Enabled="false" Visible="false" />
      </ToolBar>

      <CodeExecution>
        <References>
          <Reference dll="System.dll"/>
          <Reference dll="System.Xml.dll"/>
          <Reference dll="System.Drawing.dll"/>
          <Reference dll="System.Windows.Forms.dll"/>
          <Reference dll="cadosys.CaptureThis.Common.dll"/>
          <Reference dll="cadosys.AF.Common.dll"/>
          <Reference dll="AUTOonline.Data.Processing.Text.dll"/>
          <Reference dll="AUTOonline.Data.Processing.Interfaces.dll"/>
          <Reference dll="AUTOonline.ICRpilot.Completion.Logic.dll"/>
          <Reference dll="AUTOonline.ICRpilot.Core.Model.dll"/>
          <Reference dll="AUTOonline.Controls.DocumentFlow.Interfaces.dll"/>
        </References>
        <Imports>
          <Using namespace="System"/>
          <Using namespace="System.Xml"/>
          <Using namespace="System.Text"/>
          <Using namespace="System.Drawing"/>
          <Using namespace="System.Windows.Forms" />
          <Using namespace="System.Globalization"/>
          <Using namespace="System.Collections.Generic"/>
          <Using namespace="System.Text.RegularExpressions"/>
          <Using namespace="AUTOonline.Data.Processing.Interfaces"/>
          <Using namespace="AUTOonline.ICRpilot.Core.Model"/>
          <Using namespace="AUTOonline.ICRpilot.Completion.Logic"/>
          <Using namespace="AUTOonline.ICRpilot.Completion.Logic.Ocr"/>
          <Using namespace="AUTOonline.ICRpilot.Completion.Logic.Fields"/>
          <Using namespace="AUTOonline.ICRpilot.Completion.Logic.Config"/>
          <Using namespace="AUTOonline.ICRpilot.Completion.Logic.Global"/>
          <Using namespace="AUTOonline.ICRpilot.Completion.Logic.Contexts"/>
          <Using namespace="AUTOonline.ICRpilot.Completion.Logic.Matching"/>
          <Using namespace="AUTOonline.ICRpilot.Completion.Logic.Validation"/>
        </Imports>
      </CodeExecution>


      <Functions>
        <Function id="function1">
          <!--
          global.UI.EventSink.Forward("MsgBox", "Hello");
          -->
        </Function>
        <Function id="function2">
          <Param name="message" type="System.String"/>
          <!--
          global.UI.EventSink.Forward("MsgBox", message);
          -->
        </Function>
        <!-- ICRP-587 -->
        <Function id="FullTextSearch">
          <Param name="message" type="System.String"/>
          <Param name="names" type="System.Array"/>
          <!--                                        
            IList<IIcrSearchPattern> patterns = new List<IIcrSearchPattern>();

            foreach (string name in names)
            {
                IIcrSearchPattern pattern = new IcrSearchPattern(name);
                patterns.Add(pattern);
            }

            global.UI.FullText.Searcher.BeginSearch(patterns, async =>
            {
                IList<IOcrMatch> matches = global.UI.FullText.Searcher.EndSearch(async);
                if (matches.Count > 0)
                {
                    string[] matchedNames = new string[matches.Count];
                    for (int i = 0; i < matches.Count; i++)
                    {
                        matchedNames[i] = matches[i].Value.Digest;
                    }

                    string newmessage = string.Format(message, string.Join(",", matchedNames));
                    global.UI.EventSink.Forward("MsgBox", newmessage);
                }
            });          
            -->
        </Function>
      </Functions>

      <EventHandlers source="this.Loader">
        <!-- ICRP-594 -->
        <OnEvent hint="Gothaer FZ" name="DocumentLoaded">
          <!--
            // Gothaer
            if (global.Document.Core.Vendor.VendorId == "00015730")
                global.UI.EventSink.Forward("MsgBox", "Fahrzeug von Gothaer.\nGebotsblatt vorhanden?");
            -->
        </OnEvent>
        <!-- ICRP-587 -->
        <OnEvent hint="Gothaer SVs" name="DocumentLoaded">
          <!--          
            // Gothaer
            if (global.Document.Core.Vendor.VendorId == "00015730")
            {
              global.Functions.Invoke("FullTextSearch", "Gothaer-eigenes Gutachten von Gutachter {0}. Bitte als 'nicht relevant' verwerfen", new string[] { "Ralf Brenke", "Ralf Brust", "Frank Dahlhaus", "Axel Demitrowitz", "Heiko Gebert", "Matthias Grosschopp", "Siegfried Haubner", "Stephan Kahnt", "Andreas Kulpe", "Ralf Lübbers", "Franko Schmidt", "Jens Simon", "Jörg Wolfram", "Detlef Meyerhoff", "Bernhard Brandl", "Wilfried Dieling", "Thomas Dzurokovic", "Franco Guidi", "Bernd Hahn", "Andreas Haug", "Siegmar Just", "Rüdiger Kengelbach", "Martin Keßner", "Kai Kümmelberger", "Werner Langenwalter", "Helmut Marx", "Thomas Nitschke", "Karl-heinz Opfer", "Helmut Rögle", "Willi Schreiber", "Günter Weber", "Enver Xhakaliu", "Wolfgang Heinrich" });
            }
          -->
        </OnEvent>
        <OnEvent hint="Hellmann" name="DocumentLoaded">
          <!--          
              // OEFFENTLICHE_VERSICHERUNG_BRAUNSCHWEIG          
              if (global.Document.Core.Vendor.AUTOonlineGroupId == "00015590")
              {
                  IcrSearchPattern pattern = new IcrSearchPattern("Christian Hellmann");                  
                  global.UI.FullText.Searcher.BeginSearch(pattern, async =>
                  {
                      // discussion: this piece of code is executed on the thread other than the calling one,
                      // be careful with the UI interaction. Use only message box (or use my marshaler).
                      
                      IList<IOcrMatch> matches = global.UI.FullText.Searcher.EndSearch(async);
                      if (0 != matches.Count)
                      {
                          string customer = string.Join(" ", global.Document.Core.Vendor.Customer.Name.ToString().Split('_'));

                          string message = string.Format("Hardliner Gutachten '{0}' ({1}) - bitte als 'nicht relevant' verwerfen",
                              customer, matches[0].Value.Digest);
                              
                          global.UI.EventSink.Forward("MsgBox", message);
                      }
                  });
              }
          -->
        </OnEvent>
      </EventHandlers>

      <!-- Felder für AddressForm müssen vor "ExpertAddressForm definiert sein." -->
      <Field id="AddressName" type="Simple"  hint="Never" width="297" heigth="20" visible="false" maxLength="250">
        <Name>
          <Culture lcid="neutral" value="." />
        </Name>
      </Field>

      <Field id="AddressStreet" type="Simple" hint="Never" width="297" heigth="20" visible="false" maxLength="50">
        <Name>
          <Culture lcid="neutral" value="." />
        </Name>
      </Field>

      <Field id="AddressZipCode" type="Simple" hint="Never" width="82" heigth="20" visible="false" maxLength="10">
        <Name>
          <Culture lcid="neutral" value="." />
        </Name>
      </Field>

      <Field id="AddressCity" type="Simple" hint="Never" width="210" heigth="20" visible="false" maxLength="50">
        <Name>
          <Culture lcid="neutral" value="." />
        </Name>
      </Field>

      <Field id="AddressPhone" type="Simple" hint="Never" width="147" heigth="20" visible="false" maxLength="30">
        <Name>
          <Culture lcid="neutral" value="." />
        </Name>
      </Field>

      <Field id="AddressFax" type="Simple" hint="Never" width="143" heigth="20" visible="false" maxLength="30">
        <Name>
          <Culture lcid="neutral" value="." />
        </Name>
      </Field>

      <Field id="AddressEmail" type="Simple" hint="Never" width="297" heigth="20" visible="false" maxLength="255">
        <Name>
          <Culture lcid="neutral" value="." />
        </Name>
      </Field>

      <Field id="ParticipantId" type="Simple" hint="Never" width="297" heigth="20" visible="false" maxLength="8" >
        <Name>
          <Culture lcid="neutral" value="." />
        </Name>
      </Field>

      <Field id="AddressComment" type="Simple" hint="Never" width="297" heigth="119"  visible="false" maxLength="1000">
        <Name>
          <Culture lcid="neutral" value="." />
        </Name>
      </Field>
   
      <Field id="ExpertAddressForm" type="ExpertAddress" hint="Never">
        <Name>
          <Culture lcid="1031" value="Gutachteradresse" />
          <Culture lcid="127" value="Expert address" />
        </Name>
        <Validation class="Warning" treatEmptyAs="Error" allowRelaxationTo="Warning"/>
      </Field>

      <Field id="VIN" type="Logic" height="20" hint="Never">
        <Name>
          <Culture lcid="de-DE" value="Fahrgestellnummer" />
          <Culture lcid="neutral" value="VIN" />
        </Name>
        <DependsOn>
          <Id>Manufacturer</Id>
          <Id>VehicleType</Id>
        </DependsOn>
        <Validation treatEmptyAs="Error" class="Error" allowRelaxationTo="Warning">
          <Rule action="Evaluate">
            <Source language="CSharp">
              <!--
              IOcrSimpleContext vehicleTypeField = context.Global.Fields.Collection.ContainsKey("VehicleType") 
                  ? context.Global.Fields["VehicleType"].Ocr.As<IOcrSimpleContext>()
                  : null ;
              IOcrSimpleContext vinField = context.Global.Fields["VIN"].Ocr.As<IOcrSimpleContext>();
              IOcrSimpleContext manufacturerField = context.Global.Fields.Collection.ContainsKey("Manufacturer")
                  ? context.Global.Fields["Manufacturer"].Ocr.As<IOcrSimpleContext>()
                  : null ;

              if (vehicleTypeField != null && manufacturerField != null && 
                  ValidationClass.Valid == vehicleTypeField.Validator.Status &&
                  vehicleTypeField.Normalizer.Value != null &&
                  String.Compare(vehicleTypeField.Normalizer.Value.Trim(), "PKW", true) == 0 &&
                  !context.Global.VinValidator.IsValid(vinField.Normalizer.Value, manufacturerField.Normalizer.Value))
              {
                  vinField.Validator.Message = "Hersteller zur VIN ungültig";
                  return false;
              }
              else
              {
                  vinField.Validator.Message = string.Empty;
                  return true;
              }
              -->
            </Source>
          </Rule>
        </Validation>
        <Logic path="IGlobalContext.VinCompletionService" method="Complete" buttonEnabled="WhenValid" buttonWidth="105">
          <Name>
            <Culture lcid="de-DE" value="übernehmen" />
            <Culture lcid="neutral" value="takeover" />
          </Name>
        </Logic>
      </Field>

      <Field id="InvoiceDate" type="Simple" useOcrResult="IgnoreOcrResult">
        <Name>
          <Culture lcid="de-DE" value="Erstellungsdatum" />
          <Culture lcid="neutral" value="Creation date" />
        </Name>
        <Type>System.DateTime</Type>
        <EventHandlers source="this">
          <OnEvent name="Initialized"><!-- 
            field.Ocr.Global.ExpertiseAge.TryEnable(field);
           -->
          </OnEvent>
          <OnEvent name="Updated"><!--
            field.Ocr.Global.ExpertiseAge.ValidateAge(field); 
          -->
          </OnEvent>
        </EventHandlers>
      </Field>

      <Field id="ReplacementValue" type="Simple" height="20">
        <Name>
          <Culture lcid="1031" value="Wiederbeschaffungswert (Brutto)" />
          <Culture lcid="127" value="Replacement value (gross)" />
          <!-- 127=InvariantCulture, used as fallback, to explicitly specify en-US use 1033 -->
          <!-- cultures and lcids see http://msdn.microsoft.com/en-us/library/0h88fahh(VS.85).aspx -->
        </Name>
        <Type>System.Decimal</Type>
        <Normalization>
          <Rule action="Replace" pattern="€" with="" />
          <Rule action="Match" pattern="[0-9.,]+" />
          <Rule action="Replace" pattern="\s+" with="" />
          <Rule action="Replace" pattern="\." with="," />
          <Rule action="Replace" pattern="([0-9]*)(,)([0-9]{2,},[0-9]{1,2})" with="$1.$3" />
        </Normalization>
        <Validation class="Warning">
          <Rule action="Evaluate">
            <Source language="CSharp">
              <!--
                return (input.Decimal > 10.0M);
              -->
            </Source>
          </Rule>
        </Validation>
      </Field>

      <Field id="SalvageValue" type="Simple" height="20">
        <Name>
          <Culture lcid="de-DE" value="Restwert lt. Gutachten (Brutto)" />
          <Culture lcid="neutral" value="Residual value (gross)" />
        </Name>
        <Type>System.Decimal</Type>
        <Normalization like="ReplacementValue" />
        <Validation class="Warning" treatEmptyAs="Error" allowRelaxationTo="Warning"/>
      </Field>

      <Field id="OfferId" type="Logic" height="20" hint="Never">
        <Name>
          <Culture lcid="de-DE" value="AO-Objektnummer" />
          <Culture lcid="neutral" value="AO Object Id" />
        </Name>
        <Logic path="IGlobalContext.OfferCompletionService" method="Complete" buttonEnabled="WhenValid" buttonWidth="80">
          <Name>
            <Culture lcid="de-DE" value="übernehmen" />
            <Culture lcid="neutral" value="takeover" />
          </Name>
        </Logic>
        <Validation class="Warning" treatEmptyAs="Warning" allowRelaxationTo="Warning">
          <Rule action="Match" pattern="^(?:\d{6}|\d{16})$" />
        </Validation>
      </Field>

      <!--<Field id="NetCash" type="Simple" height="20" discardWhenValidityIsNotSafe="true">
        <Name>
          <Culture lcid="de-DE" value="Reparaturkosten (Netto)" />
          <Culture lcid="neutral" value="Repair costs (net)" />
        </Name>
        <Type>System.Decimal</Type>
        <DependsOn>
          <Id>Wages</Id>
          <Id>CostOfPainting</Id>
          <Id>CostOfSpareparts</Id>
          <Id>AdditionalCost</Id>
        </DependsOn>
        <Normalization>
          <Rule action="Replace" pattern="€" with="" />
          <Rule action="Replace" pattern="\s+" with="" />
          <Rule action="Replace" pattern="\." with="," />
          <Rule action="Replace" pattern="([0-9]*)(,)([0-9]{2,},[0-9]{1,2})" with="$1.$3" />
        </Normalization>
        <Validation class="Warning" treatEmptyAs="Error" allowRelaxationTo="Warning" >
          <Rule action="Evaluate">
            <Source language="CSharp">
              -->
      <!--
                return (input.Decimal > 10.0m);
              -->
      <!--
            </Source>
          </Rule>
          <Rule action="Evaluate">
            <Source language="CSharp">
              -->
      <!--
                return (input.Decimal < 200000.0m);
              -->
      <!--
            </Source>
          </Rule>
          <Rule action="Evaluate">
            <Source language="CSharp">
              -->
      <!--
              // using comments to preserve the code formatting (the xml editor does not deal correctly with c# code).
              // Only code inside the comment! 
              
              decimal sum = new System.Decimal();
              
              foreach (string dependency in context.Config.Value.DependsOn)
              {
                  IOcrSimpleContext simple = context.Global.Fields[dependency].Ocr.As<IOcrSimpleContext>();
                  if (ValidationClass.Valid == simple.Validator.Status && !string.IsNullOrEmpty(simple.Normalizer.Value))
                      sum += new Variant(simple.Normalizer.Value).Decimal;
              }
              
              if (0 == sum) // all fields that current field depends on were empty:
                  return true; // comparison does not make sense
              else // at least one was not empty: compare and allow 10% tolerance
                  return (Math.Abs(input.Decimal - sum) <= input.Decimal / 10.0M);
              -->
      <!--
            </Source>
          </Rule>
        </Validation>
      </Field>-->

      <Field id="ExpectedCostOfRepair" type="Checkbox" height="20" width="20" visible="true">
        <Name>
          <Culture lcid="neutral" value="geschätzte Reparaturkosten" />
        </Name>
      </Field>

      <Field id="Location.PostCode" type="Simple" height="20">
        <Name>
          <Culture lcid="de-DE" value="Standort (PLZ)" />
          <Culture lcid="neutral" value="Location (zip code)" />
        </Name>
        <Normalization>
          <Rule action="Replace" pattern="€" with="" />
          <Rule action="Match" pattern="[0-9]{5,}" />
        </Normalization>
        <Validation class="Warning" treatEmptyAs="Error" allowRelaxationTo="Warning">
          <Rule action="Match" pattern="^[0-9]{5}$" />
        </Validation>
      </Field>

      <Field id="FirstRegistrationDate" type="Simple" height="20" useOcrResult="UseOcrResultPageOnly">
        <Name>
          <Culture lcid="de-DE" value="Erstzulassung" />
          <Culture lcid="neutral" value="First registration date" />
        </Name>
        <Type formatAs="dd.MM.yyyy">System.DateTime</Type>
        <Jato relevant="true">
          <MapsTo name="FirstRegistrationDate"/>
        </Jato>
        <Normalization>
          <Rule action="Replace" pattern="," with="." />
        </Normalization>
        <Validation class="Error" treatEmptyAs="Error" allowRelaxationTo="Warning">
          <!--<Rule action="Match" pattern="^[0-9]{1,2}\.[0-9]{1,2}\.([0-9]{2}|[0-9]{4})$"/>-->
          <Rule action="Evaluate">
            <Source language="CSharp">
              <!--
              return ((input.DateTime <= DateTime.Today) && (input.DateTime >= new DateTime(DateTime.Now.Year-50, 1, 1)));
              -->
            </Source>
          </Rule>
        </Validation>
      </Field>

      <Field id="LicenseNumber" type="Simple" height="20" editable="true">
        <!--Need an option to specify validation class (e.g. Warning, Error) depending on Customer-->
        <Name>
          <Culture lcid="de-DE" value="Amtl. Kennzeichen" />
          <Culture lcid="neutral" value="License number" />
        </Name>
        <Normalization>
          <Rule action="Transform" transform="ToUpperInvariant" />
          <Rule action="Replace" pattern="^([A-ZÄÖÜ]{1,3})[- ]([A-ZÄÖÜ]{1,3}) ?([0-9]+)$" with="$1-$2 $3" />
        </Normalization>
        <Validation class="Warning" treatEmptyAs="Error" allowRelaxationTo="Warning">
          <Rule action="Match" pattern="^[A-ZÄÖÜ]{1,3}-[A-ZÄÖÜ]{1,3}\s[0-9]+$|OHNE" options="IgnoreCase" />
        </Validation>
      </Field>

      <Field id="VehicleType" type="DropDown" height="20" useOnlyAllowedValuesForRecognition="true">
        <Name>
          <Culture lcid="de-DE" value="Fahrzeugart" />
          <Culture lcid="neutral" value="Vehicle type" />
        </Name>
        <Jato relevant="true"/>
        <Validation class="Error" treatEmptyAs="Error" allowRelaxationTo="Warning">
          <Query id="VehicleTypeAliases" />
        </Validation>
      </Field>

      <Field id="Platform" type="DropDown" height="20" useOnlyAllowedValuesForRecognition="true">
        <Name>
          <Culture lcid="de-DE" value="Aufbau" />
          <Culture lcid="neutral" value="Platform" />
        </Name>
        <Normalization>
          <Rule action="Replace" pattern="^Coupe$" with="Coupé" />
        </Normalization>
        <Validation class="Warning" treatEmptyAs="Error" allowRelaxationTo="Warning">
          <Query id="Platform" />
        </Validation>
      </Field>

      <Field id="NumberOfDoors" type="Simple" height="20">
        <Name>
          <Culture lcid="de-DE" value="Anzahl Türen" />
          <Culture lcid="neutral" value="Number of doors" />
        </Name>
        <Validation class="Error" treatEmptyAs="Warning" >
          <Rule action="Match" pattern="^[1-9]$" />
        </Validation>
      </Field>

      <Field id="Manufacturer" type="DropDown" height="20">
        <Name>
          <Culture lcid="de-DE" value="Hersteller" />
          <Culture lcid="neutral" value="Manufacturer" />
        </Name>
        <Jato relevant="true"/>
        <Normalization>
          <Rule action="Replace" pattern="^Škoda$" with="Skoda" />
          <Rule action="Replace" pattern="^vw$" with="Volkswagen" options="IgnoreCase" />
          <Rule action="Replace" pattern=".*VOLKSWAGEN.*" with="VOLKSWAGEN" options="IgnoreCase" />
          <Rule action="Replace" pattern="DAIMLER[-]?CHRYSLER" with="MERCEDES-BENZ" options="IgnoreCase" />
          <Rule action="Transform" transform="ToUpperInvariant" />
        </Normalization>
        <Validation class="Warning" treatEmptyAs="Error">
          <Query id="Manufacturer" />
        </Validation>
      </Field>

      <Field id="Model" type="DropDown" height="20">
        <Name>
          <Culture lcid="de-DE" value="Typ" />
          <Culture lcid="neutral" value="Model" />
        </Name>
        <Jato relevant="true"/>
        <DependsOn>
          <Id>Manufacturer</Id>
        </DependsOn>
        <Normalization>
          <Rule action="Transform" transform="ToUpperInvariant" />
        </Normalization>
        <Validation class="Warning" treatEmptyAs="Error">
          <Query id="Model" />
        </Validation>
      </Field>

      <Field id="ModelVariant" type="Simple" height="20">
        <Name>
          <Culture lcid="de-DE" value="Variante" />
          <Culture lcid="neutral" value="Variant" />
        </Name>
        <Jato relevant="true"/>
        <Validation class="Warning" treatEmptyAs="Error" allowRelaxationTo="Warning"/>
      </Field>

      <Field id="EngineType" type="DropDown" height="20">
        <Name>
          <Culture lcid="de-DE" value="Motorart" />
          <Culture lcid="neutral" value="Engine type" />
        </Name>
        <Jato relevant="true"/>
        <Normalization>
          <Rule action="Transform" transform="ToUpperInvariant" />
          <Rule action="Match" pattern="DIESEL">
            <Rule action="Replace" pattern=".+" with="DIESEL" />
          </Rule>
          <Rule action="Match" pattern="BENZIN">
            <Rule action="Replace" pattern=".+" with="OTTO" />
          </Rule>
          <Rule action="Match" pattern="OTTO">
            <Rule action="Replace" pattern=".+" with="OTTO" />
          </Rule>
        </Normalization>
        <Validation class="Warning" treatEmptyAs="Error" allowRelaxationTo="Warning">
          <Query id="EngineType" />
        </Validation>
      </Field>

      <Field id="CylinderCapacity" type="Simple" height="20">
        <Name>
          <Culture lcid="de-DE" value="Hubraum (ccm)" />
          <Culture lcid="neutral" value="Engine volume (ccm)" />
        </Name>
        <Type>System.Double</Type>
        <Jato relevant="true"/>
        <Normalization>
          <Rule action="Match" pattern="^([0-9]{2,5})(\s*ccm)?$" options="IgnoreCase">
            <Rule action="Consume" group="1" />
          </Rule>
          <Rule action="Match" pattern="^[0-9][.,][0-9]+">
            <Rule action="Replace" pattern="," with=".">
              <Rule action="Evaluate">
                <Source language="CSharp">
                  <!--
                  int ccm = Convert.ToInt32(input.Float * 1000);                  
                  return ccm.ToString(); // must always return string representation suitable for the validation
                  -->
                </Source>
              </Rule>
            </Rule>
          </Rule>
        </Normalization>
        <Validation class="Warning" treatEmptyAs="Error" allowRelaxationTo="Warning">
          <!-- 
          <If equals="" class="Error" allowRelaxationTo="Warning" />
          <If moreThan="20000" class="Error" />
          <IfNot between="0..20000" class="Error" />
          -->
          <Rule action="Match" pattern="^[0-9]+$" />
          <Rule action="Evaluate">
            <Source language="CSharp">
              <!-- return (input.Float > 600 && input.Float < 6000F); -->
            </Source>
          </Rule>
        </Validation>
      </Field>

      <Field id="CylinderCapacityUnit" type="Simple" height="20" visible="false">
        <EventHandlers source="this">
          <OnEvent name="ResultMissing">
            <!--
            field.Current.Text = "ccm";
           -->
          </OnEvent>
        </EventHandlers>
      </Field>

      <!-- ICRP-654 PS => KW-->
      <Field id="Power" type="Simple" height="20">
        <Name>
          <Culture lcid="de-DE" value="Leistung (KW)" />
          <Culture lcid="neutral" value="Power (KW)" />
        </Name>
        <Type>System.Double</Type>
        <Jato relevant="true"/>
        <Normalization>
          <Rule action="Replace" pattern="\." with="," />
          <Rule action="Match" pattern="[0-9,]+" />
        </Normalization>
        <Validation class="Warning" treatEmptyAs="Error" allowRelaxationTo="Warning">
          <Rule action="Evaluate">
            <Source language="CSharp">
              <!-- return (input.Float > 0 && input.Float <= 544F); -->
            </Source>
          </Rule>
        </Validation>
      </Field>

      <!-- ICRP-654 PS => KW-->
      <Field id="PowerUnit" type="Simple" height="20" visible="false">
        <EventHandlers source="this">
          <OnEvent name="ResultMissing">
            <!--
            field.Current.Text = "KW";            
           -->
          </OnEvent>
        </EventHandlers>
      </Field>

      <Field id="Color" type="Simple" height="20">
        <Name>
          <Culture lcid="de-DE" value="Farbe" />
          <Culture lcid="neutral" value="Color" />
        </Name>
        <Validation class="Warning" treatEmptyAs="Error" allowRelaxationTo="Warning" />
      </Field>

      <Field id="Mileage" type="Simple" height="20" useOcrResult="UseOcrResultPageOnly">
        <Name>
          <Culture lcid="de-DE" value="Laufleistung (km)" />
          <Culture lcid="neutral" value="Mileage" />
        </Name>
        <Normalization>
          <Rule action="Replace" pattern="[\.,' ']" with="" />
          <Rule action="Match" pattern="^([0-9]{1,7})(\s*km)?$" options="IgnoreCase">
            <Rule action="Consume" group="1" />
          </Rule>
        </Normalization>
        <Validation class="Warning" treatEmptyAs="Error" allowRelaxationTo="Warning">
          <Rule action="Match" pattern="[0-9]{2,7}">
            <Rule action="Evaluate">
              <Source language="CSharp">
                <!--                                                   
                  IOcrSimpleContext simple = context.Global.Fields["FirstRegistrationDate"].Ocr.As<IOcrSimpleContext>();
                  if (ValidationClass.Valid == simple.Validator.Status && !string.IsNullOrEmpty(simple.Normalizer.Value))
                  {
                      DateTime firstRegistration = new Variant(simple.Normalizer.Value).DateTime;
                      double age = DateTime.Now.Subtract(firstRegistration).TotalDays;
                      
                      if (age <= 0) age = 1;
                      
                      return input.Int32 / age > 19 && input.Int32 / age < 138;
                  }
                
                return true;
                -->
              </Source>
              <Source language="CSharp">
                <!-- 
                return input.Int32 < 1000000;
                -->
              </Source>
            </Rule>
          </Rule>
        </Validation>
      </Field>
      
      <Field id="NextExhaustInspection" type="Simple" height="20">
        <Name>
          <Culture lcid="de-DE" value="Nächste AU" />
          <Culture lcid="neutral" value="Next exhaust inspection" />
        </Name>
        <Type formatAs="MM.yyyy">System.DateTime</Type>
        <Normalization>
          <Rule action="Match" pattern="[0-9]{1,2}/[0-9]{2,4}">
            <Rule action="Evaluate">
              <Source language="CSharp">
                <!-- // provide an opportunity to have HU/AU like this: "08/11"
                string[] parts = input.Value.Split(new char[] { '/' } );
                return string.Format("01/{0}/{1}", parts[0], parts[1]);
                -->
              </Source>
            </Rule>
          </Rule>
        </Normalization>
        <Validation class="Warning">
          <Rule action="Evaluate">
            <Source language="CSharp">
              <!--
              return Math.Abs(((TimeSpan)(input.DateTime - DateTime.Today)).Days) < 1800;
              -->
            </Source>
          </Rule>
        </Validation>
      </Field>

      <Field id="NextSaftyInspection" type="Simple" height="20">
        <Name>
          <Culture lcid="de-DE" value="Nächste HU" />
          <Culture lcid="neutral" value="Next safety inspection" />
        </Name>
        <Type formatAs="MM.yyyy">System.DateTime</Type>
        <Normalization>
          <Rule action="Match" pattern="[0-9]{1,2}/[0-9]{2,4}">
            <Rule action="Evaluate">
              <Source language="CSharp">
                <!--
                string[] parts = input.Value.Split(new char[] { '/' } );
                return string.Format("01/{0}/{1}", parts[0], parts[1]);
                -->
              </Source>
            </Rule>
          </Rule>
        </Normalization>
        <Validation class="Warning">
          <Rule action="Evaluate">
            <Source language="CSharp">
              <!--
              return Math.Abs(((TimeSpan)(input.DateTime - DateTime.Today)).Days) < 1800;;
              -->
            </Source>
          </Rule>
        </Validation>
      </Field>

      <Field id="NumberOfPreviousOwners" type="Simple" height="20">
        <Name>
          <Culture lcid="de-DE" value="Anzahl vorbesitzer" />
          <Culture lcid="neutral" value="Number of previous owners" />
        </Name>
        <Type>System.Int32</Type>
        <Validation class="Warning">
          <Rule action="Match" pattern="^[0-9]$" />
        </Validation>
      </Field>

      <Field id="GearType" type="DropDown" height="20">
        <Name>
          <Culture lcid="de-DE" value="Getriebeart" />
          <Culture lcid="neutral" value="Gear type" />
        </Name>
        <Validation class="Error" treatEmptyAs="Warning">
          <Query id="GearType" />
        </Validation>
      </Field>

      <Field id="StandardEquipment" type="Simple" hint="Never" height="200" width="450">
        <Name>
          <Culture lcid="de-DE" value="Serienausstattung" />
          <Culture lcid="neutral" value="Standard equipment" />
        </Name>
        <OnTheFly behavior="MultiLine" />
        <Validation class="Warning" treatEmptyAs="Error" allowRelaxationTo="Warning"/>
      </Field>

      <Field id="SpecialEquipment" type="Simple" hint="Never" height="200" width="450">
        <Name>
          <Culture lcid="de-DE" value="Sonderausstattung" />
          <Culture lcid="neutral" value="Extra equipment" />
        </Name>
        <OnTheFly behavior="MultiLine" />
        <Validation class="Warning" treatEmptyAs="Error" allowRelaxationTo="Warning"/>
      </Field>


      <Field id="PreDamageDescription" type="Simple" hint="Never" height="200" width="450">
        <Name>
          <!-- ICRP-691 -->
          <Culture lcid="de-DE" value="Vorschäden / Altschäden / Sonstiges" />
          <Culture lcid="neutral" value="Predamage description" />
        </Name>
        <OnTheFly behavior="MultiLine" />
      </Field>

      <Field id="Remarks" type="Simple" hint="Never" height="200" width="450">
        <Name>
          <!-- ICRP-1304 -->
          <Culture lcid="de-DE" value="Sonstiges/Bemerkungen" />
          <Culture lcid="neutral" value="Other/Remarks" />
        </Name>
        <OnTheFly behavior="MultiLine" />
      </Field>

      <Field id="Totalloss" type="Checkbox" height="20" width="20" visible="true">
        <Name>
          <Culture lcid="neutral" value="Totalschaden" />
        </Name>
      </Field>

      <Field id="DamageDescription" type="Simple" hint="Never" height="200" width="450">
        <Name>
          <!-- ICRP-691 -->
          <Culture lcid="de-DE" value="Schadenbeschreibung" />
          <Culture lcid="neutral" value="Damage description" />
        </Name>
        <OnTheFly behavior="MultiLine" />
      </Field>

      <Field id="CalculationText" type="Simple" hint="Never" height="200" width="450">
        <Name>
          <Culture lcid="de-DE" value="Kalkulationstext" />
          <Culture lcid="neutral" value="Calculation text" />
        </Name>
        <Validation class="Error" allowRelaxationTo="Warning" treatEmptyAs="Error"/>
        <OnTheFly behavior="MultiLine" />
        <AssociatedRecognitionFields>
          <AssociatedRecognitionField id="TableText_ErsatzteileEP" title="Ersatzteile"/>
          <AssociatedRecognitionField id="TableText_ArbeitslohnEP" title="Arbeitslohn"/>
          <AssociatedRecognitionField id="TableText_LackierungEP" title="Lackierung"/>
          <!--<AssociatedRecognitionField id="TableText_NebenkostenEP" title="Nebenkosten"/>-->
        </AssociatedRecognitionFields>
      </Field>

      <Field id="NetCash" type="Simple" height="20" discardWhenValidityIsNotSafe="true">
        <Name>
          <Culture lcid="de-DE" value="Reparaturkosten (Netto)" />
          <Culture lcid="neutral" value="Repair costs (net)" />
        </Name>
        <Type>System.Decimal</Type>
        <DependsOn>
          <Id>Wages</Id>
          <Id>CostOfPainting</Id>
          <Id>CostOfSpareparts</Id>
          <!--<Id>AdditionalCost</Id>-->
        </DependsOn>
        <Normalization>
          <Rule action="Replace" pattern="€" with="" />
          <Rule action="Replace" pattern="\s+" with="" />
          <Rule action="Replace" pattern="\." with="," />
          <Rule action="Replace" pattern="([0-9]*)(,)([0-9]{2,},[0-9]{1,2})" with="$1.$3" />
        </Normalization>
        <Validation class="Warning" treatEmptyAs="Error" allowRelaxationTo="Warning" >
          <Rule action="Evaluate">
            <Source language="CSharp">
              <!--
                return (input.Decimal > 10.0m);
            -->
            </Source>
          </Rule>
          <Rule action="Evaluate">
            <Source language="CSharp">
              <!--
                return (input.Decimal < 200000.0m);
              -->
            </Source>
          </Rule>
          <Rule action="Evaluate">
            <Source language="CSharp">
              <!--
              // using comments to preserve the code formatting (the xml editor does not deal correctly with c# code).
              // Only code inside the comment! 
              
              decimal sum = new System.Decimal();
              
              foreach (string dependency in context.Config.Value.DependsOn)
              {
                  IOcrSimpleContext simple = context.Global.Fields[dependency].Ocr.As<IOcrSimpleContext>();
                  if (ValidationClass.Valid == simple.Validator.Status && !string.IsNullOrEmpty(simple.Normalizer.Value))
                      sum += new Variant(simple.Normalizer.Value).Decimal;
              }
              
              if (0 == sum) // all fields that current field depends on were empty:
                  return true; // comparison does not make sense
              else // at least one was not empty: compare and allow 10% tolerance
                  return (Math.Abs(input.Decimal - sum) <= input.Decimal / 10.0M);
              -->
            </Source>
          </Rule>
        </Validation>
      </Field>

      <Field id="CostOfSpareparts" type="Simple" height="20" readOnlyWhenValidityIsSafe="true">
        <Name>
          <Culture lcid="de-DE" value="Endsumme Ersatzteile" />
          <Culture lcid="neutral" value="Cost of spare parts" />
        </Name>
        <Normalization like="NetCash"/>
        <Type>System.Decimal</Type>
        <Validation class="Warning" />
      </Field>

      <!--<Field id="AdditionalCost" type="Simple" height="20" readOnlyWhenValidityIsSafe="true" >
        <Name>
          <Culture lcid="de-DE" value="Endsumme Nebenkosten" />
          <Culture lcid="neutral" value="Additional costs" />
        </Name>
        <Normalization like="NetCash"/>
        <Type>System.Decimal</Type>
        <Validation class="Warning" />
      </Field>-->

      <Field id="Wages" type="Simple" height="20" readOnlyWhenValidityIsSafe="true">
        <Name>
          <Culture lcid="de-DE" value="Endsumme Arbeitslohn" />
          <Culture lcid="neutral" value="Wages" />
        </Name>
        <Normalization like="NetCash"/>
        <Type>System.Decimal</Type>
        <Validation class="Warning" />
      </Field>

      <Field id="CostOfPainting" type="Simple" height="20" readOnlyWhenValidityIsSafe="true">
        <Name>
          <Culture lcid="de-DE" value="Endsumme Lackierung" />
          <Culture lcid="neutral" value="Painting costs" />
        </Name>
        <Normalization like="NetCash"/>
        <Type>System.Decimal</Type>
        <Validation class="Warning" />
        <EventHandlers source="this.Ocr.KeyboardNavigation">
          <OnEvent name="NavigatingAway">
            <!--
            field.Ocr.Global.UI.Completion.TryPerform();
            -->
          </OnEvent>
        </EventHandlers>
      </Field>

      <!-- Empty field to ensure that when using return button to navigate through the fields
      the "Save" popup is always displayed at the end, even if the last field is read only.-->
      <Field id="DummyField" type="Simple" height="20">
        <Name>
          <Culture lcid="de-DE" value="Leeres Feld" />
          <Culture lcid="neutral" value="Empty field" />
        </Name>
        <EventHandlers source="this.Ocr.KeyboardNavigation">
          <OnEvent name="NavigatingAway">
            <!--
            field.Ocr.Global.UI.Completion.TryPerform();
            -->
          </OnEvent>
        </EventHandlers>
      </Field>

    </Config>
  </Completion>
</ICRpilot>
